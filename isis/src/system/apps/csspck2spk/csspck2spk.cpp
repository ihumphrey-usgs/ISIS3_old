#include "Isis.h"

#include <iostream>
#include <sstream>
#include <string>

#include <QHash>
#include <QList>
#include <QSet>
#include <QString>

#include "Filename.h"
#include "Pvl.h"
#include "PvlGroup.h"
#include "TextFile.h"

using namespace Isis;
using std::string;


void IsisMain() {
  UserInterface &ui = Application::GetUserInterface();

  // Fetch the pairing file
  Filename pckFilename;
  if (ui.WasEntered("PAIRING")) {
    pckFilename = ui.GetFilename("PAIRING");
  }
  else {
    // If not provided, assume the latest pairing file in the data area
    string pckfile("$cassini/kernels/pck/pck2spk_????.map");
    pckFilename = pckfile;
    pckFilename.HighestVersion();
  }

  TextFile txt(pckFilename.Expanded());

  QList<QString> spkList;
  QHash<QString, QString> pairings;

  iString rawLine;
  while (txt.GetLine(rawLine)) {
    // Split the line around the comma and remove any unwanted characters
    string unwantedChars = "\n\r\t\v\f ";
    iString pck = rawLine.Token(",");
    pck.Trim(unwantedChars);
    iString spk = rawLine;
    spk.Trim(unwantedChars);

    // Store the SPK into a list so we can iterate over it to ensure all SPKs
    // are properly mapped from the pairing file to the SPK DB file
    spkList.append(QString::fromStdString(spk));

    // Add an entry to the pairings hash for nearly constant-time lookup
    pairings.insert(QString::fromStdString(spk), QString::fromStdString(pck));
  }

  // Get the "base file" used for reference for all PCK entries from the most
  // recent PCK DB file
  Filename basepckPath("$base/kernels/pck/kernels.????.db");
  basepckPath.HighestVersion();
  Pvl basepck(basepckPath.Expanded());
  PvlKeyword basefile =
      basepck.FindObject("TargetAttitudeShape").Group(0)["File"];

  // Open the input file from the GUI or find the latest version of the DB file
  string inDBfile;
  if (ui.WasEntered("FROM")) {
    inDBfile = ui.GetFilename("FROM");
  }
  else {
    // Stores highest version
    string exDBfile("$cassini/kernels/spk/kernels.????.db");
    Filename exDBfilenm(exDBfile);
    exDBfilenm.HighestVersion();
    inDBfile = exDBfilenm.Expanded();
  }

  // Read SPK DB file into a PVL and search the PVL for the main object
  Pvl spkdb(inDBfile);
  PvlObject &mainob = spkdb.FindObject("SpacecraftPosition");
  mainob.SetName("TargetAttitudeShape");

  // Search for the Selection Groups, and then based on the File Keyword, add
  // the appropriate PCK file keyword.  First check to see if the input file has
  // already been updated from an old version of the program.
  QSet<QString> mappedSpks;
  for (int spkIndex = mainob.Groups() - 1; spkIndex >= 0; spkIndex--) {
    PvlGroup &spkGroup = mainob.Group(spkIndex);

    // Only modify the Selection groups, all others can remain the same
    if (spkGroup.IsNamed("Selection")) {
      int count = 0;
      for (int keyIndex = 0; keyIndex < spkGroup.Keywords(); keyIndex++) {
        if (spkGroup[keyIndex].IsNamed("File")) {
          count++;

          // Older versions of this program added the file to the SPK kernels DB
          // file instead of creating a new one in the PCK directory. Check for
          // this.
          if (count > 1) {
            string msg = "This file has already been updated [";
            msg += iString(inDBfile) + "] by an old version of this program.";
            msg += "  This is not a valid input.";
            throw IException(IException::User, msg, _FILEINFO_);
          }
        }
      }

      // Get the basename of the SPK file, which references 1:1 with an entry in
      // the pairing file
      string value = (string) spkGroup["File"];
      Filename filename(value);
      QString basename = filename.Basename();

      // Remove entries in-place if there is not a match in the PCK2SPK pairing
      // file.  If the entries in the PCK DB file generated by this program are
      // not in the same relative order as the SPK DB file entries, then it is
      // possible for an SPK to be paired with the wrong PCK during "spiceinit".
      if (!pairings.contains(basename)) {
        mainob.DeleteGroup(spkIndex);
      }
      else {
        // Record that the current SPK has been properly mapped to an entry in
        // the existing SPK DB file.  Every SPK from the pairing file must have
        // a selection group in the SPK DB file.
        mappedSpks.insert(basename);

        // Modify the SPK group in-place to preserve relative ordering, then
        // change the keywords to contain on PCK-relevant information
        PvlKeyword newfile("File", "$cassini/kernels/pck/" + pairings[basename]);
        spkGroup.AddKeyword(basefile, Pvl::Replace);
        spkGroup.AddKeyword(newfile);
        spkGroup.DeleteKeyword("Type");
      }
    }
  }

  // Error check to ensure every SPK in the pairing file has an entry in the SPK
  // DB file
  for (int i = 0; i < spkList.size(); i++) {
    QString spk = spkList[i];
    if (!mappedSpks.contains(spk)) {
      // Every SPK in the pairing file must have its corresponding entry in the
      // DB file
      string msg = "SPK [" + spk.toStdString() +
          "] does not map to an entry in [" + inDBfile + "]";
      throw IException(IException::User, msg, _FILEINFO_);
    }
  }

  // Determine whether we want to update the data area directly or write to a
  // user-specified location
  Filename outDBfile;
  if (ui.WasEntered("TO")) {
    outDBfile = ui.GetFilename("TO");
  }
  else {
    outDBfile = "$cassini/kernels/pck/kernels.????.db";
    outDBfile.NewVersion();
  }

  // Write the updated PVL as the new PCK DB file
  spkdb.Write(outDBfile.Expanded());
}

